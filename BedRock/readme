
Reference Url: https://www.youtube.com/watch?v=3OP39y4dO_Y&list=PLZoTAELRMXVP5zpBfH7pab4aB1LbmCM1z&index=7

# 📝 Blog Generator using AWS Lambda, Amazon Bedrock, and API Gateway

This project automatically generates a 200-word blog on a given topic using [Amazon Bedrock](w) (specifically the `amazon.nova-lite-v1` model) and serves it via an [AWS Lambda](w) function behind an [API Gateway](w). Optionally, the generated blog can be saved to [Amazon S3](w).

---

## 🔧 Architecture

* **API Gateway** (HTTP endpoint)
* **AWS Lambda** (runtime: Python 3.12, architecture: x86\_64)
* **Amazon Bedrock** (`amazon.nova-lite-v1` model, region: `eu-north-1`)
* **Amazon S3** (optional storage)

---

## 📂 Folder Structure

```
.
├── lambda_function.py     # Lambda function source code
├── requirements.txt       # cotains the modules used
├── README.md              # Project documentation
```

---

## 📦 Requirements

Ensure the following AWS services and configurations are in place:

### AWS Services

* [Amazon Bedrock](w) access in region `eu-north-1`
* [Amazon S3](w) bucket (e.g., `aws_bedrock_course1`) if saving blogs
* API Gateway (HTTP) configured to trigger the Lambda
* AWS Lambda Layer including necessary libraries (e.g., `boto3` if not already provided)

### Lambda Configuration

* Runtime: `Python 3.12`
* Architecture: `x86_64`
* Required IAM permissions:

  * `bedrock:InvokeModel`
  * `s3:PutObject` (if using S3)
  *  For Accessing BedRock Models assign this IAM Roles AmazonBedrockFullAccess
* Upload or link a **Lambda Layer** compatible with Python 3.11, 3.12, and 3.13 (optional if all used modules are native)

---

## 🚀 How to Deploy

### 1. Upload the Lambda Function

Ensure your `lambda_function.py` is deployed in your Lambda console.

### 2. Configure API Gateway

* Set up an HTTP API.
* Create a POST route (e.g., `/generate-blog`).
* Connect the route to the Lambda function.

### 3. Set Environment Variables and Permissions

No environment variables are required by default. Make sure the Lambda IAM role includes `AmazonBedrockFullAccess` and `AmazonS3FullAccess` (if using S3).

---

## 📥 Sample API Request

```http
POST /generate-blog
Content-Type: application/json

{
  "blog_topic": "AI in Healthcare"
}
```

---

## 📤 Sample Response

```json
{
  "statusCode": 200,
  "body": "Blog Generation is completed: <generated_text_here>"
}
```

---

## 🧠 Notes

* **Model Used**: `amazon.nova-lite-v1` from Amazon Bedrock
* **Region**: `eu-north-1` (ensure Bedrock access is enabled in this region)
* **Blog Storage**: Optionally saved to `s3://aws_bedrock_course1/blog-output/`

To enable S3 saving, uncomment this line in `lambda_handler`:

```python
# save_blog_details_s3(s3_key, s3_bucket, generate_blog)
```

---

## ✅ Future Enhancements

* Add support for multiple Bedrock models via config
* Allow user to specify blog length
* Use a vector store or database for blog storage and retrieval
* Add authentication to the API

---

## 📄 License

MIT License. Use and modify freely for educational and non-commercial purposes.

